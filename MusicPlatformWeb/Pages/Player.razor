@page "/player/{playlistId:guid}"
@using MusicClasses
@using Microsoft.AspNetCore.Components
@inject Orchestrator _orchestrator

<div class="player-container">
    <div class="login-card">
        <h3 class="mb-3">üéµ Music Player</h3>

        <h5>@(currentSong?.name ?? "No song selected")</h5>
        <p class="muted">@currentPlaylistName</p>

        <div class="center" style="gap: 8px; margin: 12px 0;">
            <button class="button-outline" @onclick="PreviousSong">‚èÆÔ∏è</button>
            <button class="submit-button" @onclick="TogglePlay">@(isPlaying ? "‚è∏Ô∏è Pause" : "‚ñ∂Ô∏è Play")</button>
            <button class="button-outline" @onclick="NextSong">‚è≠Ô∏è</button>
        </div>

        @if (playlistItems?.Count > 0)
        {
            <ul class="stack-sm">
                @foreach (var item in playlistItems.Select((pi, idx) => new { pi, idx }))
                {
                    <li>
                        <button class="button-ghost" @onclick="() => SelectIndex(item.idx)">@item.pi.song.name</button>
                    </li>
                }
            </ul>
        }
        else
        {
            <p class="muted">No songs available for this playlist.</p>
        }
    </div>
    
</div>

@code {
    [Parameter] public Guid? playlistId { get; set; }
    private List<PlaylistItem> playlistItems = new();
    private Song? currentSong;
    private bool isPlaying;
    private int currentIndex;
    private string? currentPlaylistName;

    protected override void OnInitialized()
    {
        var user = _orchestrator.getCurrentUser();
        if (user == null || !playlistId.HasValue)
        {
            return;
        }

        var playlists = _orchestrator.getPlaylists(user);
        var target = playlists.FirstOrDefault(p => p.id == playlistId.Value);
        if (target != null)
        {
            currentPlaylistName = target.name;
            playlistItems = target.getItems();
            if (playlistItems.Count > 0)
            {
                currentIndex = 0;
                currentSong = playlistItems[0].song;
            }
        }
    }

    private void TogglePlay()
    {
        isPlaying = !isPlaying;
    }

    private void PreviousSong()
    {
        if (playlistItems.Count == 0) return;
        currentIndex = (currentIndex - 1 + playlistItems.Count) % playlistItems.Count;
        currentSong = playlistItems[currentIndex].song;
    }

    private void NextSong()
    {
        if (playlistItems.Count == 0) return;
        currentIndex = (currentIndex + 1) % playlistItems.Count;
        currentSong = playlistItems[currentIndex].song;
    }

    private void SelectIndex(int index)
    {
        if (index < 0 || index >= playlistItems.Count) return;
        currentIndex = index;
        currentSong = playlistItems[currentIndex].song;
    }
}
