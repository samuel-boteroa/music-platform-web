@page "/player/{playlistId:guid}"
@using MusicClasses
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@inject Orchestrator _orchestrator

<div class="player-container">
    <div class="login-card player-card">
        <div class="player-header">
            <button class="back-button" title="Volver" aria-label="Volver" @onclick="GoBack">‚Üê</button>
            <h3>üéµ Music Player</h3>
        </div>

        <div class="track-info">
            <h5 class="track-title">@(currentSong?.name ?? "No song selected")</h5>
            <p class="playlist-name muted">@currentPlaylistName</p>
        </div>

        <div class="controls center">
            <button class="control-btn" @onclick="PreviousSong">‚èÆÔ∏è</button>
            <button class="play-btn-large" @onclick="TogglePlay">@(isPlaying ? "‚è∏Ô∏è Pause" : "‚ñ∂Ô∏è Play")</button>
            <button class="control-btn" @onclick="NextSong">‚è≠Ô∏è</button>
        </div>

        @if (playlistItems?.Count > 0)
        {
            <ul class="queue stack-sm">
                @foreach (var item in playlistItems.Select((pi, idx) => new { pi, idx }))
                {
                    var isActive = item.idx == currentIndex;
                    <li>
                        <button class="queue-item @(isActive ? "active" : null)" @onclick="() => SelectIndex(item.idx)">@item.pi.song.name</button>
                    </li>
                }
            </ul>
        }
        else
        {
            <p class="muted">No songs available for this playlist.</p>
        }
    </div>

</div>

@code {
    [Parameter] public Guid? playlistId { get; set; }
    [Inject] private IJSRuntime JS { get; set; } = default!;
    private List<PlaylistItem> playlistItems = new();
    private Song? currentSong;
    private bool isPlaying;
    private int currentIndex;
    private string? currentPlaylistName;

    protected override void OnInitialized()
    {
        var user = _orchestrator.getCurrentUser();
        if (user == null || !playlistId.HasValue)
        {
            return;
        }

        var playlists = _orchestrator.getPlaylists(user);
        var target = playlists.FirstOrDefault(p => p.id == playlistId.Value);
        if (target != null)
        {
            currentPlaylistName = target.name;
            playlistItems = target.getItems();
            if (playlistItems.Count > 0)
            {
                currentIndex = 0;
                currentSong = playlistItems[0].song;
            }
        }
    }

    private void TogglePlay()
    {
        isPlaying = !isPlaying;
    }

    private async Task GoBack()
    {
        await JS.InvokeVoidAsync("eval", "history.back()");
    }

    private void PreviousSong()
    {
        if (playlistItems.Count == 0) return;
        currentIndex = (currentIndex - 1 + playlistItems.Count) % playlistItems.Count;
        currentSong = playlistItems[currentIndex].song;
    }

    private void NextSong()
    {
        if (playlistItems.Count == 0) return;
        currentIndex = (currentIndex + 1) % playlistItems.Count;
        currentSong = playlistItems[currentIndex].song;
    }

    private void SelectIndex(int index)
    {
        if (index < 0 || index >= playlistItems.Count) return;
        currentIndex = index;
        currentSong = playlistItems[currentIndex].song;
    }
}
